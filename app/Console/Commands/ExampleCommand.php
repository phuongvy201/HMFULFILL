<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Log;

class ExampleCommand extends Command
{
    /**
     * T√™n v√† signature c·ªßa console command.
     * 
     * ƒê·ªãnh nghƒ©a:
     * - T√™n command: example:run
     * - Options: --force (t√πy ch·ªçn)
     * - Arguments: {action} (b·∫Øt bu·ªôc)
     */
    protected $signature = 'example:run {action} {--force : B·∫Øt bu·ªôc th·ª±c hi·ªán m√† kh√¥ng c·∫ßn x√°c nh·∫≠n}';

    /**
     * M√¥ t·∫£ c·ªßa console command.
     */
    protected $description = 'Command v√≠ d·ª• ƒë·ªÉ minh h·ªça c√°ch t·∫°o command t·ª´ ƒë·∫ßu';

    /**
     * Constructor - Kh·ªüi t·∫°o command
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Th·ª±c thi console command.
     * 
     * @return int Tr·∫£ v·ªÅ 0 n·∫øu th√†nh c√¥ng, kh√°c 0 n·∫øu l·ªói
     */
    public function handle()
    {
        // L·∫•y argument v√† option
        $action = $this->argument('action');
        $force = $this->option('force');

        // Hi·ªÉn th·ªã th√¥ng tin b·∫Øt ƒë·∫ßu
        $this->info('üöÄ B·∫Øt ƒë·∫ßu th·ª±c hi·ªán ExampleCommand...');
        $this->line("üìù Action: {$action}");
        $this->line("‚ö° Force mode: " . ($force ? 'Yes' : 'No'));

        try {
            // X·ª≠ l√Ω theo action
            switch ($action) {
                case 'test':
                    $this->handleTest($force);
                    break;

                case 'cleanup':
                    $this->handleCleanup($force);
                    break;

                case 'status':
                    $this->handleStatus();
                    break;

                default:
                    $this->error("‚ùå Action '{$action}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£!");
                    $this->info("üí° C√°c action c√≥ s·∫µn: test, cleanup, status");
                    return 1;
            }

            $this->info('‚úÖ Command ƒë√£ ho√†n th√†nh th√†nh c√¥ng!');
            return 0;
        } catch (\Exception $e) {
            $this->error('‚ùå C√≥ l·ªói x·∫£y ra: ' . $e->getMessage());
            Log::error('ExampleCommand Error', [
                'action' => $action,
                'force' => $force,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return 1;
        }
    }

    /**
     * X·ª≠ l√Ω action test
     */
    private function handleTest($force)
    {
        $this->info('üß™ ƒêang th·ª±c hi·ªán test...');

        if (!$force && !$this->confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ch·∫°y test?')) {
            $this->warn('‚ö†Ô∏è Test ƒë√£ b·ªã h·ªßy b·ªüi ng∆∞·ªùi d√πng');
            return;
        }

        // Gi·∫£ l·∫≠p qu√° tr√¨nh test v·ªõi progress bar
        $bar = $this->output->createProgressBar(5);
        $bar->start();

        for ($i = 0; $i < 5; $i++) {
            sleep(1); // Gi·∫£ l·∫≠p c√¥ng vi·ªác
            $bar->advance();
        }

        $bar->finish();
        $this->newLine();
        $this->info('‚úÖ Test ho√†n th√†nh!');
    }

    /**
     * X·ª≠ l√Ω action cleanup
     */
    private function handleCleanup($force)
    {
        $this->info('üßπ ƒêang th·ª±c hi·ªán cleanup...');

        if (!$force && !$this->confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën cleanup? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!')) {
            $this->warn('‚ö†Ô∏è Cleanup ƒë√£ b·ªã h·ªßy b·ªüi ng∆∞·ªùi d√πng');
            return;
        }

        // Gi·∫£ l·∫≠p qu√° tr√¨nh cleanup
        $this->info('üóëÔ∏è ƒêang x√≥a temporary files...');
        $this->info('üìÅ ƒêang d·ªçn d·∫πp cache...');
        $this->info('üíæ ƒêang optimize database...');

        $this->info('‚úÖ Cleanup ho√†n th√†nh!');
    }

    /**
     * X·ª≠ l√Ω action status
     */
    private function handleStatus()
    {
        $this->info('üìä Hi·ªÉn th·ªã tr·∫°ng th√°i h·ªá th·ªëng...');

        // T·∫°o b·∫£ng hi·ªÉn th·ªã th√¥ng tin
        $this->table(
            ['Th√¥ng s·ªë', 'Gi√° tr·ªã', 'Tr·∫°ng th√°i'],
            [
                ['Database', 'Connected', 'üü¢ OK'],
                ['Cache', 'Redis', 'üü¢ OK'],
                ['Queue', 'Running', 'üü¢ OK'],
                ['Storage', '85% used', 'üü° Warning'],
                ['Memory', '2.1GB/4GB', 'üü¢ OK'],
            ]
        );

        $this->info('‚úÖ Ki·ªÉm tra tr·∫°ng th√°i ho√†n th√†nh!');
    }
}
